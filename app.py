{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPSN29yz27za2k6X459EzkM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install streamlit\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xNgSv5RJYap7","executionInfo":{"status":"ok","timestamp":1746968316877,"user_tz":-330,"elapsed":5446,"user":{"displayName":"Priyadharshini B","userId":"03109898539546387708"}},"outputId":"ffc32f25-bb93-4144-8a36-4e5c6993c96b"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: streamlit in /usr/local/lib/python3.11/dist-packages (1.45.0)\n","Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n","Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n","Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n","Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.1.8)\n","Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n","Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n","Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n","Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n","Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n","Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n","Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n","Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n","Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n","Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n","Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.0.0)\n","Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n","Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.9.1)\n","Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n","Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n","Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.37.1)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.4.26)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.neural_network import MLPRegressor\n","from sklearn.metrics import r2_score, mean_squared_error\n","import joblib\n","import os\n","import matplotlib.pyplot as plt\n","from google.colab import files\n","\n","# Upload dataset\n","uploaded = files.upload()\n","\n","# Load the dataset\n","df = pd.read_csv('paddy_energy_dataset.csv')\n","\n","# Select input features and target\n","X = df.iloc[:, 1:13]  # Input columns (features)\n","y = df['Total Output (MJ/ha)']  # Target column (output)\n","\n","# Scale the input features\n","scaler = MinMaxScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)\n","\n","# Create and train the model\n","model = MLPRegressor(hidden_layer_sizes=(12, 8, 1), max_iter=1000, random_state=1)\n","model.fit(X_train, y_train)\n","\n","# Predict the output\n","y_pred = model.predict(X_test)\n","\n","# Print the R² and RMSE scores\n","print(\"R²:\", r2_score(y_test, y_pred))\n","print(\"RMSE:\", np.sqrt(mean_squared_error(y_test, y_pred)))\n","\n","# Create a scatter plot for actual vs predicted values\n","plt.scatter(y_test, y_pred, color='blue')\n","plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)\n","plt.xlabel('Actual')\n","plt.ylabel('Predicted')\n","plt.title('Actual vs Predicted Total Output (MJ/ha)')\n","plt.grid(True)\n","plt.show()\n","\n","# Ensure the model directory exists\n","os.makedirs('model', exist_ok=True)\n","\n","# Save the trained model and scaler as .pkl files\n","joblib.dump(model, 'model/trained_model.pkl')\n","joblib.dump(scaler, 'model/scaler.pkl')\n","\n","# Optionally, download the model files for use in your app\n","files.download('model/trained_model.pkl')\n","files.download('model/scaler.pkl')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":652},"id":"l3SRz7QeZjrl","executionInfo":{"status":"ok","timestamp":1746968391271,"user_tz":-330,"elapsed":63647,"user":{"displayName":"Priyadharshini B","userId":"03109898539546387708"}},"outputId":"fc0bfca7-c455-4d04-967f-9b64fbc113bc"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-74a1dd33-1493-4d4a-a4de-6fe0ef6cf223\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-74a1dd33-1493-4d4a-a4de-6fe0ef6cf223\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving paddy_energy_dataset.csv to paddy_energy_dataset (1).csv\n","R²: nan\n","RMSE: 106897.34128625227\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (1000) reached and the optimization hasn't converged yet.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_regression.py:1266: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n","  warnings.warn(msg, UndefinedMetricWarning)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_bdd5ed07-599c-4a01-a3bc-7f54689b2d97\", \"trained_model.pkl\", 35951)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_1a48472e-a635-44b6-9f87-beac159ec5c5\", \"scaler.pkl\", 1719)"]},"metadata":{}}]},{"cell_type":"code","source":["import os\n","\n","# Create model directory if it doesn't exist\n","os.makedirs('model', exist_ok=True)\n","\n","# Now save your model and scaler\n","import joblib\n","joblib.dump(model, 'model/trained_model.pkl')\n","joblib.dump(scaler, 'model/scaler.pkl')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qfnvEI8EZMGI","executionInfo":{"status":"ok","timestamp":1746968448788,"user_tz":-330,"elapsed":16,"user":{"displayName":"Priyadharshini B","userId":"03109898539546387708"}},"outputId":"caa85359-dbbb-464e-edb5-94b8d68ba03d"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['model/scaler.pkl']"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["import streamlit as st\n","import joblib\n","import numpy as np\n","\n","# Load the trained model and scaler\n","model = joblib.load('model/trained_model.pkl')\n","scaler = joblib.load('model/scaler.pkl')\n","\n","# Streamlit app to collect user inputs\n","st.title(\"Farm Energy Efficiency Prediction\")\n","\n","# Collect user inputs\n","human_labour = st.number_input(\"Human Labour (h)\", min_value=0.0)\n","machinery_use = st.number_input(\"Machinery Use (h)\", min_value=0.0)\n","diesel = st.number_input(\"Diesel Fuel (L)\", min_value=0.0)\n","nitrogen = st.number_input(\"Nitrogen Fertilizer (kg)\", min_value=0.0)\n","phosphate = st.number_input(\"Phosphate Fertilizer (kg)\", min_value=0.0)\n","potassium = st.number_input(\"Potassium Fertilizer (kg)\", min_value=0.0)\n","zinc = st.number_input(\"Zinc Fertilizer (kg)\", min_value=0.0)\n","fym = st.number_input(\"Farmyard Manure (kg)\", min_value=0.0)\n","chemicals = st.number_input(\"Chemicals (Pesticides/Herbicides) (kg)\", min_value=0.0)\n","water = st.number_input(\"Water for Irrigation (m³)\", min_value=0.0)\n","electricity = st.number_input(\"Electricity (kWh)\", min_value=0.0)\n","seeds = st.number_input(\"Seeds (kg)\", min_value=0.0)\n","\n","# Prepare input array\n","input_data = np.array([[human_labour, machinery_use, diesel, nitrogen, phosphate,\n","                        potassium, zinc, fym, chemicals, water, electricity, seeds]])\n","\n","# Scale the input data\n","input_scaled = scaler.transform(input_data)\n","\n","# Predict using the model\n","prediction = model.predict(input_scaled)\n","\n","# Show the prediction\n","st.success(f\"Predicted Total Energy Output (MJ/ha): {prediction[0]:.2f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fWQchNy4YcxP","executionInfo":{"status":"ok","timestamp":1746968451154,"user_tz":-330,"elapsed":498,"user":{"displayName":"Priyadharshini B","userId":"03109898539546387708"}},"outputId":"e6a7e206-f68e-4e17-cfaf-fcb3c8b3fcba"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-11 13:00:50.459 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.460 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.461 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.462 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.463 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.464 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.466 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.467 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.468 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.469 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.469 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.470 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.471 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.472 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.473 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.474 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.474 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.475 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.482 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.485 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.487 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.488 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.488 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.492 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.493 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.495 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.496 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.497 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.497 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.498 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.502 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.503 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.504 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.504 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.505 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.506 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.507 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.508 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.509 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.510 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.511 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.512 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.513 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.514 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.514 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.515 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.515 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.516 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.517 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.517 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.518 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.519 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.520 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.521 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.521 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.522 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.523 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.524 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.525 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.525 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.526 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.527 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.528 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.528 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.529 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.530 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.530 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.531 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.532 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.537 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.537 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.538 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.540 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.540 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but MinMaxScaler was fitted with feature names\n","  warnings.warn(\n","2025-05-11 13:00:50.545 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-05-11 13:00:50.546 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"]},{"output_type":"execute_result","data":{"text/plain":["DeltaGenerator()"]},"metadata":{},"execution_count":17}]}]}